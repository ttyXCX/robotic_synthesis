from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import h5py
import os
import sys
import numpy as np

from collections import namedtuple
from prompt_toolkit import prompt
from PIL import Image

import karel

from dsl import get_KarelDSL
from karel_util import state2symbol, state2image

global data_file
global output_file
global save_dir
global karel_world
global dsl

Output = namedtuple(
    'Output',
    ['id',
     'gt_program',
     'tf_program',  # program generated by teacher forcing
     'tf_syntax',
     'tf_num_correct_execution',
     'tf_is_correct_execution',
     'greedy_program',  # program generated by greedy unrolling
     'greedy_syntax',
     'greedy_num_correct_execution',
     'greedy_is_correct_execution',
     'test_tf_program',  # test program generated by teacher forcing
     'test_tf_syntax',
     'test_tf_num_correct_execution',
     'test_tf_is_correct_execution',
     'test_greedy_program',  # test program generated by greedy unrolling
     'test_greedy_syntax',
     'test_greedy_num_correct_execution',
     'test_greedy_is_correct_execution',
     ])


def GetArgument():
    parser = argparse.ArgumentParser()
    parser.add_argument('--data_hdf5', type=str)
    parser.add_argument('--output_hdf5', type=str)
    return parser.parse_args()


def ConstructOutputList(data_file, output_file):
    dsl_type = data_file['data_info']['dsl_type'].value
    dsl = get_KarelDSL(dsl_type=dsl_type, seed=123)
    output_list = []
    for e_id in output_file.keys():
        gt_program_intseq = data_file[e_id]['program'].value
        e_out = output_file[e_id]
        if 'test_program_prediction' in e_out:
            output_list.append(
                Output(id=e_id,
                       gt_program=dsl.intseq2str(gt_program_intseq),
                       tf_program=e_out['program_prediction'].value,
                       tf_syntax=e_out['program_syntax'].value,
                       tf_num_correct_execution=e_out['program_num_execution_correct'].value,
                       tf_is_correct_execution=e_out['program_is_correct_execution'].value,
                       greedy_program=e_out['greedy_prediction'].value,
                       greedy_syntax=e_out['greedy_syntax'].value,
                       greedy_num_correct_execution=e_out['greedy_num_execution_correct'].value,
                       greedy_is_correct_execution=e_out['greedy_is_correct_execution'].value,
                       test_tf_program=e_out['test_program_prediction'].value,
                       test_tf_syntax=e_out['test_program_syntax'].value,
                       test_tf_num_correct_execution=e_out['test_program_num_execution_correct'].value,
                       test_tf_is_correct_execution=e_out['test_program_is_correct_execution'].value,
                       test_greedy_program=e_out['test_greedy_prediction'].value,
                       test_greedy_syntax=e_out['test_greedy_syntax'].value,
                       test_greedy_num_correct_execution=e_out['test_greedy_num_execution_correct'].value,
                       test_greedy_is_correct_execution=e_out['test_greedy_is_correct_execution'].value
                       )
            )
        else:
            output_list.append(
                Output(id=e_id,
                       gt_program=dsl.intseq2str(gt_program_intseq),
                       tf_program=e_out['program_prediction'].value,
                       tf_syntax=e_out['program_syntax'].value,
                       tf_num_correct_execution=e_out['program_num_execution_correct'].value,
                       tf_is_correct_execution=e_out['program_is_correct_execution'].value,
                       greedy_program=e_out['greedy_prediction'].value,
                       greedy_syntax=e_out['greedy_syntax'].value,
                       greedy_num_correct_execution=e_out['greedy_num_execution_correct'].value,
                       greedy_is_correct_execution=e_out['greedy_is_correct_execution'].value,
                       test_tf_program=None,
                       test_tf_syntax=None,
                       test_tf_num_correct_execution=None,
                       test_tf_is_correct_execution=None,
                       test_greedy_program=None,
                       test_greedy_syntax=None,
                       test_greedy_num_correct_execution=None,
                       test_greedy_is_correct_execution=None
                       )
            )
    return output_list


def PrintUsage():
    print("Example Usage)\n"
          "def filter_function(output):\n"
          "\treturn output.greedy_num_correct_execution == 10\n"
          "subset = filter(filter_function, output_list)\n"
          "VisualizeOutput(subset)\n")


def PrintOutputList():
    print("Output List)\n"
          "id: example id, type=str\n"
          "gt_program: gt program code, type=str\n"
          "tf_program: teacher forcing generated program code, type=str\n"
          "tf_syntax: correct syntax or not, choices=[correct, wrong\n"
          "tf_num_correct_execution: "
          "number of correct exacution for generated program, type=int\n"
          "greedy_program: program generated by greedy unrolling, type=str\n"
          "greedy_syntax: correct syntax or not, choices=[correct, wrong\n"
          "greedy_num_correct_execution: "
          "number of correct exacution for generated program, type=int\n")

def DumpComparison(output):
    data = data_file[output.id]

    save_dir = os.path.join(output_dir, output.id)
    if not os.path.exists(save_dir):
        print('Create directory: {}'.format(save_dir))
        os.makedirs(save_dir)

    print("Execution id: {} is saved in {}".format(output.id, save_dir))

    with open(os.path.join(save_dir, 'index.html'), 'w') as html_file:
        html_file.write('<div>* <b>gt_program</b>: {}</div>'.format(output.gt_program))
        html_file.write('<div>* <b>tf_program</b>: {}'.format(output.tf_program))
        html_file.write('<b> - num_correct_execution: {}, syntax: {}</b></div>'.format(
            output.tf_num_correct_execution, output.tf_syntax))
        html_file.write('<div>* <b>greedy_program</b>: {}'.format(output.greedy_program))
        html_file.write('<b> - num_correct_execution: {}, syntax: {}</b></div>'.format(
            output.greedy_num_correct_execution, output.greedy_syntax))

        num_demo = data['s_h'].shape[0]
        for i in range(num_demo):
            demo_len = data['s_h_len'][i]
            demo = data['s_h'][i]
            s0 = demo[0]
            tf_execution, tf_execution_len = ExecuteProgram(s0, output.tf_program)
            greedy_execution, greedy_execution_len = ExecuteProgram(s0, output.greedy_program)

            html_file.write('</br>')
            html_file.write('<h4>Execution [{}/{}]</h4>'.format(i, num_demo))

            html_file.write('<div>* <b>gt_program</b>: {}</div>'.format(output.gt_program))
            html_file.write('<div>* <b>tf_program</b>: {}'.format(output.tf_program))
            html_file.write('<div>* <b>greedy_program</b>: {}'.format(output.greedy_program))

            demo_seq_image = DemoSequenceImage(demo, demo_len) * 255
            demo_seq_image = Image.fromarray(demo_seq_image.astype('uint8'))
            demo_name = 'demo_{}.png'.format(i)
            demo_seq_image.save(os.path.join(save_dir, demo_name), 'PNG')
            html_file.write('<div><b>{}</b></br><img src="{}"></div>'.format(
                demo_name, demo_name))

            tf_name = 'tf_execution_{}.png'.format(i)
            if tf_execution_len > 0:
                tf_seq_image = DemoSequenceImage(tf_execution, tf_execution_len) * 255
                tf_seq_image = Image.fromarray(tf_seq_image.astype('uint8'))
                tf_seq_image.save(os.path.join(save_dir, tf_name), 'PNG')
                html_file.write('<div><b>{}</b></br><img src="{}"></div>'.format(
                    tf_name, tf_name))
            else:
                html_file.write('<div><b>{} - None</b></br></div>'.format(tf_name))

            greedy_name = 'greedy_execution_{}.png'.format(i)
            if greedy_execution_len > 0:
                greedy_seq_image = DemoSequenceImage(greedy_execution,
                                                     greedy_execution_len) * 255
                greedy_seq_image = Image.fromarray(greedy_seq_image.astype('uint8'))
                greedy_seq_image.save(os.path.join(save_dir, greedy_name), 'PNG')
                html_file.write('<div><b>{}</b></br><img src="{}"></div>'.format(
                    greedy_name, greedy_name))
            else:
                html_file.write('<div><b>{} - None</b></br></div>'.format(greedy_name))


def DemoSequenceImage(demo, demo_len):
    seq = []
    for i in range(demo_len):
        demo_image =state2image(demo[i], root_dir='karel')
        seq.append(demo_image)
        seq.append(np.zeros([demo_image.shape[0], 1, demo_image.shape[2]]) + 1)
    demo_seq_image = np.concatenate(seq, axis=1)
    return demo_seq_image


def ExecuteProgram(s0, program):
    try:
        karel_world.set_new_state(s0)
        dsl.run(karel_world, program)
    except:
        execution = None
        execution_len = 0
    else:
        execution = karel_world.s_h
        execution_len = len(execution)
    return execution, execution_len


def VisualizeOutput(output_list):
    cur_id = 0
    ids = [output.id for output in output_list]
    while True:
        print('ids / previous id: {}'.format(cur_id))
        for i, id in enumerate(ids[max(cur_id - 5, 0):cur_id + 5]):
            output = output_list[i]
            print('#{number}:\t#tf_correct: {num_tf_correct} tf_syntax: {tf_syntax}\n'
                  '\t#greedy_correct: {num_greedy_correct} greedy_syntax: {greedy_syntax}'.format(
                      number=max(cur_id - 5, 0) + i,
                      num_tf_correct=output.tf_num_correct_execution,
                      tf_syntax=output.tf_syntax,
                      num_greedy_correct=output.greedy_num_correct_execution,
                      greedy_syntax=output.greedy_syntax))

        print('Put id you want to examine')
        cur_id = int(prompt(u'In: '))

        output = output_list[cur_id]
        data = data_file[output.id]
        print('* gt_program: {}'.format(output.gt_program))
        print('* tf_program: {}'.format(output.tf_program))
        print('* greedy_program: {}'.format(output.greedy_program))
        for i, l in enumerate(data['s_h_len']):
            print('demo #{}: length {}, tf: {}, greedy: {}'.format(
                i, l, 'correct' if output.tf_is_correct_execution[i] else 'wrong',
                'correct' if output.greedy_is_correct_execution[i] else 'wrong'))
        print('Put demonstration number [0-{}]'.format(data['s_h'].shape[0]))
        demo_idx = int(prompt(u'In: '))

        print('* gt_program: {}'.format(output.gt_program))
        print('* tf_program: {}'.format(output.tf_program))
        print('* greedy_program: {}'.format(output.greedy_program))
        seq_idx = 0
        s0 = data['s_h'][demo_idx][seq_idx]
        state2symbol(s0)

        tf_execution, tf_execution_len = ExecuteProgram(s0, output.tf_program)
        greedy_execution, greedy_execution_len = ExecuteProgram(s0, output.greedy_program)

        max_seq_len = max(data['s_h_len'][demo_idx],
                          tf_execution_len, greedy_execution_len)
        quit_vis = False
        seq_idx += 1
        while seq_idx < max_seq_len:
            print("Press 'c': continue, 'n': next example, 'q': quit, 's': save")
            print(seq_idx, data['s_h_len'][demo_idx])
            key = prompt(u'In: ')
            if key == 'c':
                print('* gt_program: {}'.format(output.gt_program))
                if seq_idx < data['s_h_len'][demo_idx]:
                    state2symbol(data['s_h'][demo_idx][seq_idx])
                else: print('None')
                print('* tf_program: {}'.format(output.tf_program))
                if seq_idx < tf_execution_len:
                    state2symbol(tf_execution[seq_idx])
                else: print('None')
                print('* greedy_program: {}'.format(output.greedy_program))
                if seq_idx < greedy_execution_len:
                    state2symbol(greedy_execution[seq_idx])
                else: print('None')
                seq_idx += 1
            elif key == 'n':
                break
            elif key == 's':
                DumpComparison(output)
            elif key == 'q':
                quit_vis = True
                break
            else:
                print('Wrong key')
        print('Demo is terminated')

        if quit_vis:
            break
    print('Visualization is terminated')

if __name__ == '__main__':
    args = GetArgument()

    try: data_file = h5py.File(args.data_hdf5, 'r')
    except:
        data_file = None
        print('Fail to read --data_hdf5: {}'.format(args.data_hdf5))
        sys.exit()
    try: output_file = h5py.File(args.output_hdf5, 'r')
    except:
        output_file = None
        print('Fail to read --output_hdf5: {}'.format(args.output_hdf5))
        sys.exit()

    output_list = ConstructOutputList(data_file, output_file)
    output = output_list[0]

    PrintUsage()

    output_dir = os.path.join(os.path.dirname(args.output_hdf5),
                              'inspect_output')

    dsl_type = data_file['data_info']['dsl_type'].value
    dsl = get_KarelDSL(dsl_type=dsl_type, seed=123)
    karel_world = karel.Karel_world()
